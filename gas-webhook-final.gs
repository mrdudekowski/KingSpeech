/**
 * KingSpeech GAS Webhook - Final Working Version
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ —Å –ª–µ–Ω–¥–∏–Ω–≥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram + Google Sheets
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –æ—à–∏–±–∫–∏
 */

const CONFIG = {
  // Telegram Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  TELEGRAM_BOT_TOKEN: 'YOUR_BOT_TOKEN',
  MANAGER_CHAT_ID: 'YOUR_CHAT_ID',
  
  // Google Sheets –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  SPREADSHEET_ID: 'YOUR_SPREADSHEET_ID',
  SHEET_NAME: 'LEADS',
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
  HONEYPOT_FIELD: 'website',
  REQUIRED_FIELDS: ['name'],
  CONTACT_FIELDS: ['email', 'phone'],
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  DATE_FORMAT: 'dd.MM.yyyy, HH:mm:ss',
  TIMEZONE: 'Europe/Moscow'
};

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫)
 */
function doPost(e) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if (!e || !e.postData) {
      console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö POST –∑–∞–ø—Ä–æ—Å–∞');
      return createResponse(false, 'No POST data received', null);
    }
    
    console.log('üì• –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å:', e.postData.contents);
    
    const formData = parseFormData(e.postData.contents);
    console.log('üìã –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData);
    
    const validation = validateLeadData(formData);
    if (!validation.valid) {
      console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:', validation.error);
      return createResponse(false, validation.error, null);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
    const sheetsResult = saveToSheets(formData);
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Sheets:', sheetsResult);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const telegramResult = sendToTelegram(formData);
    console.log('üì± –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramResult);
    
    return createResponse(true, '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞', {
      sheets_saved: sheetsResult.success,
      telegram_sent: telegramResult.success,
      lead_id: sheetsResult.lead_id,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    return createResponse(false, '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.toString(), null);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤ (health check)
 */
function doGet(e) {
  try {
    console.log('üîç Health check –∑–∞–ø—Ä–æ—Å');
    
    const configCheck = checkConfiguration();
    const stats = getStats();
    
    return createResponse(true, 'GAS Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç', {
      status: 'healthy',
      config: configCheck,
      stats: stats,
      timestamp: new Date().toISOString(),
      version: '2.2.0'
    });
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ health check:', error);
    return createResponse(false, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ' + error.toString(), null);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ (CORS preflight)
 */
function doOptions(e) {
  return createResponse(true, 'CORS preflight', null);
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
 */
function parseFormData(postData) {
  const params = new URLSearchParams(postData);
  const data = {};
  
  for (const [key, value] of params.entries()) {
    data[key] = value.trim();
  }
  
  return data;
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
 */
function validateLeadData(data) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ honeypot (–∑–∞—â–∏—Ç–∞ –æ—Ç –±–æ—Ç–æ–≤)
  if (data[CONFIG.HONEYPOT_FIELD] && data[CONFIG.HONEYPOT_FIELD].length > 0) {
    return { valid: false, error: 'Bot detected - honeypot field filled' };
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  for (const field of CONFIG.REQUIRED_FIELDS) {
    if (!data[field] || data[field].length === 0) {
      return { valid: false, error: `Missing required field: ${field}` };
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ)
  let hasContact = false;
  for (const field of CONFIG.CONTACT_FIELDS) {
    if (data[field] && data[field].length > 0) {
      hasContact = true;
      break;
    }
  }
  
  if (!hasContact) {
    return { valid: false, error: 'At least one contact field (email or phone) is required' };
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è email
  if (data.email && data.email.length > 0) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(data.email)) {
      return { valid: false, error: 'Invalid email format' };
    }
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  if (data.phone && data.phone.length > 0) {
    const phoneRegex = /^[\+]?[0-9\s\-\(\)]{10,}$/;
    if (!phoneRegex.test(data.phone.replace(/\s/g, ''))) {
      return { valid: false, error: 'Invalid phone format' };
    }
  }
  
  return { valid: true };
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets
 */
function saveToSheets(data) {
  try {
    const spreadsheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID);
    let sheet = spreadsheet.getSheetByName(CONFIG.SHEET_NAME);
    
    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!sheet) {
      sheet = spreadsheet.insertSheet(CONFIG.SHEET_NAME);
      setupSheetHeaders(sheet);
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const formattedData = formatDataForSheets(data);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    const lastRow = sheet.getLastRow();
    const newRow = lastRow + 1;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    sheet.getRange(newRow, 1, 1, formattedData.length).setValues([formattedData]);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    formatSheetRow(sheet, newRow, formattedData);
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫—É:', newRow);
    
    return { success: true, lead_id: newRow };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Sheets:', error);
    return { success: false, error: error.toString() };
  }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ª–∏—Å—Ç–∞
 */
function setupSheetHeaders(sheet) {
  const headers = [
    '‚è∞ –í—Ä–µ–º—è',
    'üë§ –ò–º—è',
    'üìß Email',
    'üì± –¢–µ–ª–µ—Ñ–æ–Ω',
    'üí¨ –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä',
    'üéØ –¶–µ–ª—å',
    'üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞',
    'üîó –ò—Å—Ç–æ—á–Ω–∏–∫',
    'üìä UTM Source',
    'üìä UTM Medium',
    'üìä UTM Campaign',
    'üåê –ò—Å—Ç–æ—á–Ω–∏–∫'
  ];
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headerRange = sheet.getRange(1, 1, 1, headers.length);
  headerRange.setBackground('#4285f4');
  headerRange.setFontColor('#ffffff');
  headerRange.setFontWeight('bold');
  headerRange.setHorizontalAlignment('center');
  
  // –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
  sheet.setFrozenRows(1);
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
  sheet.setColumnWidth(1, 150); // –í—Ä–µ–º—è
  sheet.setColumnWidth(2, 200); // –ò–º—è
  sheet.setColumnWidth(3, 250); // Email
  sheet.setColumnWidth(4, 150); // –¢–µ–ª–µ—Ñ–æ–Ω
  sheet.setColumnWidth(5, 120); // –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä
  sheet.setColumnWidth(6, 200); // –¶–µ–ª—å
  sheet.setColumnWidth(7, 150); // –°—Ç—Ä–∞–Ω–∏—Ü–∞
  sheet.setColumnWidth(8, 150); // –ò—Å—Ç–æ—á–Ω–∏–∫
  sheet.setColumnWidth(9, 120); // UTM Source
  sheet.setColumnWidth(10, 120); // UTM Medium
  sheet.setColumnWidth(11, 120); // UTM Campaign
  sheet.setColumnWidth(12, 120); // –ò—Å—Ç–æ—á–Ω–∏–∫
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Sheets
 */
function formatDataForSheets(data) {
  const now = new Date();
  const formattedTime = Utilities.formatDate(now, CONFIG.TIMEZONE, CONFIG.DATE_FORMAT);
  
  return [
    formattedTime, // ‚è∞ –í—Ä–µ–º—è
    data.name || '', // üë§ –ò–º—è
    data.email || '', // üìß Email
    data.phone || '', // üì± –¢–µ–ª–µ—Ñ–æ–Ω
    data.messenger || '', // üí¨ –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä
    data.goal || '', // üéØ –¶–µ–ª—å
    data.page || '', // üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞
    data.ref || '', // üîó –ò—Å—Ç–æ—á–Ω–∏–∫
    data.utm_source || '', // üìä UTM Source
    data.utm_medium || '', // üìä UTM Medium
    data.utm_campaign || '', // üìä UTM Campaign
    'GAS Webhook' // üåê –ò—Å—Ç–æ—á–Ω–∏–∫
  ];
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ Sheets
 */
function formatSheetRow(sheet, row, data) {
  const range = sheet.getRange(row, 1, 1, data.length);
  
  // –ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫
  if (row % 2 === 0) {
    range.setBackground('#f8f9fa');
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  sheet.getRange(row, 1).setNumberFormat('dd.mm.yyyy hh:mm:ss');
  
  // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
  range.setHorizontalAlignment('left');
  range.setVerticalAlignment('middle');
  
  // –ì—Ä–∞–Ω–∏—Ü—ã
  range.setBorder(true, true, true, true, true, true);
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
 */
function sendToTelegram(data) {
  try {
    const message = formatTelegramMessage(data);
    const url = `https://api.telegram.org/bot${CONFIG.TELEGRAM_BOT_TOKEN}/sendMessage`;
    
    const payload = {
      chat_id: CONFIG.MANAGER_CHAT_ID,
      text: message,
      parse_mode: 'Markdown',
      disable_web_page_preview: true,
      disable_notification: false
    };
    
    const options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      payload: JSON.stringify(payload)
    };
    
    const response = UrlFetchApp.fetch(url, options);
    const result = JSON.parse(response.getContentText());
    
    if (result.ok) {
      console.log('‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      return { success: true, message_id: result.result.message_id };
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ Telegram:', result.description);
      return { success: false, error: result.description };
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    return { success: false, error: error.toString() };
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
 */
function formatTelegramMessage(data) {
  const now = new Date();
  const formattedTime = Utilities.formatDate(now, CONFIG.TIMEZONE, CONFIG.DATE_FORMAT);
  
  let message = '*üéØ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å –ª–µ–Ω–¥–∏–Ω–≥–∞*\n\n';
  
  // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  message += `üë§ *–ò–º—è:* ${data.name}\n`;
  
  // –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (data.email) {
    message += `üìß *Email:* \`${data.email}\`\n`;
  }
  
  if (data.phone) {
    message += `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* \`${data.phone}\`\n`;
  }
  
  if (data.messenger) {
    message += `üí¨ *–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä:* ${data.messenger}\n`;
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  if (data.goal) {
    message += `üéØ *–¶–µ–ª—å:* ${data.goal}\n`;
  }
  
  if (data.page) {
    message += `üåê *–°—Ç—Ä–∞–Ω–∏—Ü–∞:* ${data.page}\n`;
  }
  
  if (data.ref) {
    message += `üîó *–ò—Å—Ç–æ—á–Ω–∏–∫:* ${data.ref}\n`;
  }
  
  // UTM –º–µ—Ç–∫–∏
  if (data.utm_source || data.utm_medium || data.utm_campaign) {
    message += `\nüìä *UTM –º–µ—Ç–∫–∏:*\n`;
    if (data.utm_source) message += `‚Ä¢ Source: ${data.utm_source}\n`;
    if (data.utm_medium) message += `‚Ä¢ Medium: ${data.utm_medium}\n`;
    if (data.utm_campaign) message += `‚Ä¢ Campaign: ${data.utm_campaign}\n`;
  }
  
  message += `\n‚è∞ *–í—Ä–µ–º—è:* ${formattedTime}`;
  message += `\nüåê *–ò—Å—Ç–æ—á–Ω–∏–∫:* GAS Webhook`;
  
  return message;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ HTTP –æ—Ç–≤–µ—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
 */
function createResponse(success, message, data) {
  const response = {
    ok: success,
    message: message,
    data: data,
    timestamp: new Date().toISOString(),
    version: '2.2.0'
  };
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥
  const output = ContentService
    .createTextOutput(JSON.stringify(response, null, 2))
    .setMimeType(ContentService.MimeType.JSON);
  
  return output;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
function checkConfiguration() {
  const errors = [];
  
  if (!CONFIG.TELEGRAM_BOT_TOKEN || CONFIG.TELEGRAM_BOT_TOKEN === 'YOUR_BOT_TOKEN') {
    errors.push('TELEGRAM_BOT_TOKEN not configured');
  }
  
  if (!CONFIG.MANAGER_CHAT_ID || CONFIG.MANAGER_CHAT_ID === 'YOUR_CHAT_ID') {
    errors.push('MANAGER_CHAT_ID not configured');
  }
  
  if (!CONFIG.SPREADSHEET_ID || CONFIG.SPREADSHEET_ID === 'YOUR_SPREADSHEET_ID') {
    errors.push('SPREADSHEET_ID not configured');
  }
  
  return {
    valid: errors.length === 0,
    errors: errors,
    configured_fields: {
      telegram: !errors.includes('TELEGRAM_BOT_TOKEN') && !errors.includes('MANAGER_CHAT_ID'),
      sheets: !errors.includes('SPREADSHEET_ID')
    }
  };
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function getStats() {
  try {
    const spreadsheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID);
    const sheet = spreadsheet.getSheetByName(CONFIG.SHEET_NAME);
    
    if (!sheet) {
      return { error: 'Sheet not found' };
    }
    
    const lastRow = sheet.getLastRow();
    const totalLeads = lastRow > 1 ? lastRow - 1 : 0;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    let todayLeads = 0;
    if (lastRow > 1) {
      const dateRange = sheet.getRange(2, 1, lastRow - 1, 1);
      const dates = dateRange.getValues();
      
      todayLeads = dates.filter(date => {
        const leadDate = new Date(date[0]);
        leadDate.setHours(0, 0, 0, 0);
        return leadDate.getTime() === today.getTime();
      }).length;
    }
    
    return {
      total_leads: totalLeads,
      today_leads: todayLeads,
      last_lead_date: lastRow > 1 ? sheet.getRange(lastRow, 1).getValue() : null,
      sheet_name: CONFIG.SHEET_NAME
    };
    
  } catch (error) {
    return { error: error.toString() };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
function testConfiguration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ GAS Webhook...');
  
  const configCheck = checkConfiguration();
  console.log('‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', configCheck);
  
  if (!configCheck.valid) {
    console.error('‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è:', configCheck.errors);
    return { success: false, errors: configCheck.errors };
  }
  
  // –¢–µ—Å—Ç Sheets
  const sheetsTest = getStats();
  if (sheetsTest.error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Sheets:', sheetsTest.error);
  } else {
    console.log('‚úÖ Sheets –¥–æ—Å—Ç—É–ø–µ–Ω:', sheetsTest);
  }
  
  // –¢–µ—Å—Ç Telegram
  const telegramTest = sendToTelegram({
    name: 'Test User',
    email: 'test@example.com',
    phone: '+7 (999) 123-45-67',
    messenger: 'Telegram',
    goal: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞',
    page: '/test'
  });
  
  if (telegramTest.success) {
    console.log('‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  } else {
    console.error('‚ùå –û—à–∏–±–∫–∞ Telegram:', telegramTest.error);
  }
  
  return {
    success: !sheetsTest.error && telegramTest.success,
    sheets: !sheetsTest.error,
    telegram: telegramTest.success,
    config: configCheck.valid
  };
}
