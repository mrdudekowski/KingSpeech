#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ KingSpeech —Å GAS Webhook
"""

import requests
import json
import time
from urllib.parse import urlencode

class GASIntegrationTester:
    def __init__(self, gas_url):
        self.gas_url = gas_url
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'KingSpeech-Tester/1.0',
            'Content-Type': 'application/x-www-form-urlencoded'
        })
    
    def test_health_check(self):
        """–¢–µ—Å—Ç GET –∑–∞–ø—Ä–æ—Å–∞ (health check)"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...")
        
        try:
            response = self.session.get(self.gas_url)
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"   –û—Ç–≤–µ—Ç: {json.dumps(data, indent=2, ensure_ascii=False)}")
                return True
            else:
                print(f"   –û—à–∏–±–∫–∞: {response.text}")
                return False
                
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False
    
    def test_lead_submission(self, test_data=None):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏"""
        print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏...")
        
        if test_data is None:
            test_data = {
                'name': '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                'email': 'test@example.com',
                'phone': '+7 (999) 123-45-67',
                'messenger': 'Telegram',
                'goal': '–ò–∑—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ',
                'page': '/test',
                'ref': 'https://google.com',
                'utm_source': 'test',
                'utm_medium': 'manual',
                'utm_campaign': 'integration_test',
                'website': ''  # honeypot –ø–æ–ª–µ
            }
        
        try:
            response = self.session.post(
                self.gas_url,
                data=test_data
            )
            
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(response.headers)}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"   –û—Ç–≤–µ—Ç: {json.dumps(data, indent=2, ensure_ascii=False)}")
                return data.get('ok', False)
            else:
                print(f"   –û—à–∏–±–∫–∞: {response.text}")
                return False
                
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False
    
    def test_invalid_data(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        invalid_data = {
            'email': 'test@example.com',
            'phone': '+7 (999) 123-45-67'
        }
        
        try:
            response = self.session.post(
                self.gas_url,
                data=invalid_data
            )
            
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                if not data.get('ok', True):
                    print(f"   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {data.get('message', 'Unknown error')}")
                    return True
                else:
                    print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö: {data}")
                    return False
            else:
                print(f"   –û—à–∏–±–∫–∞: {response.text}")
                return False
                
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False
    
    def test_honeypot_protection(self):
        """–¢–µ—Å—Ç honeypot –∑–∞—â–∏—Ç—ã"""
        print("üï∑Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ honeypot –∑–∞—â–∏—Ç—ã...")
        
        honeypot_data = {
            'name': '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'email': 'test@example.com',
            'phone': '+7 (999) 123-45-67',
            'website': 'spam-bot'  # honeypot –ø–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
        }
        
        try:
            response = self.session.post(
                self.gas_url,
                data=honeypot_data
            )
            
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                if not data.get('ok', True):
                    print(f"   ‚úÖ –°–ø–∞–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {data.get('message', 'Unknown error')}")
                    return True
                else:
                    print(f"   ‚ùå –°–ø–∞–º –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {data}")
                    return False
            else:
                print(f"   –û—à–∏–±–∫–∞: {response.text}")
                return False
                
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False
    
    def test_cors_headers(self):
        """–¢–µ—Å—Ç CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤...")
        
        try:
            response = self.session.options(self.gas_url)
            print(f"   –°—Ç–∞—Ç—É—Å OPTIONS: {response.status_code}")
            
            cors_headers = {
                'Access-Control-Allow-Origin': response.headers.get('Access-Control-Allow-Origin'),
                'Access-Control-Allow-Methods': response.headers.get('Access-Control-Allow-Methods'),
                'Access-Control-Allow-Headers': response.headers.get('Access-Control-Allow-Headers')
            }
            
            print(f"   CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏: {cors_headers}")
            
            if cors_headers['Access-Control-Allow-Origin']:
                print("   ‚úÖ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                return True
            else:
                print("   ‚ö†Ô∏è CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                return False
                
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞ CORS —Ç–µ—Å—Ç–∞: {e}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GAS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        print("=" * 50)
        
        results = {
            'health_check': self.test_health_check(),
            'lead_submission': self.test_lead_submission(),
            'invalid_data': self.test_invalid_data(),
            'honeypot_protection': self.test_honeypot_protection(),
            'cors_headers': self.test_cors_headers()
        }
        
        print("\n" + "=" * 50)
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        
        passed = 0
        total = len(results)
        
        for test_name, result in results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"   {test_name}: {status}")
            if result:
                passed += 1
        
        print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == total:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! GAS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GAS.")
        
        return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("KingSpeech GAS Integration Tester")
    print("=" * 40)
    
    gas_url = input("–í–≤–µ–¥–∏—Ç–µ URL –≤–∞—à–µ–≥–æ GAS webhook: ").strip()
    
    if not gas_url:
        print("‚ùå URL –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    
    tester = GASIntegrationTester(gas_url)
    results = tester.run_all_tests()
    
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –≤ Telegram")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ Google Sheets")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏ —Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ª–µ–Ω–¥–∏–Ω–≥–∞")
    
    if results['lead_submission']:
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é! –û–±–Ω–æ–≤–∏—Ç–µ URL –≤ script.js –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ª–µ–Ω–¥–∏–Ω–≥.")
    else:
        print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å GAS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç.")

if __name__ == "__main__":
    main()
